#include<bits/stdc++.h>
using namespace std;
 
/* A binary tree node has data, pointer to left child
and a pointer to right child */
class node
{
    public:
    int data;
    node* left;
    node* right;
};
 

node* newNode(int data)
{
    node* Node = new node();
    Node->data = data;
    Node->left = NULL;
    Node->right = NULL;
 
    return(Node);
}
 
void storeInorder(node* root,vector<int>&v){
    if(root==NULL) return;
    storeInorder(root->left,v);
    v.push_back(root->data);
    storeInorder(root->right,v);
}

node* createBST(vector<int>&v,int start,int end){
    if(start>end) return NULL;
    int mid=(start+end)/2;
    node* root=newNode(v[mid]);
    root->left=createBST(v,start,mid-1);
    root->right=createBST(v,mid+1,end);
    return root;
}

node* mergeTrees(node* root1,node* root2,int n,int m){
    vector<int>v;
    storeInorder(root1,v);
    storeInorder(root2,v);
    sort(v.begin(),v.end());
    node* root=createBST(v,0,m+n-1);
    return root;
    
}

void printInorder(node* root){
    if(root==NULL) return;
    printInorder(root->left);
    cout<<root->data<<" ";
    printInorder(root->right);
}
 
/* Driver code*/
int main()
{
    /* Create following tree as first balanced BST
        100
        / \
        50 300
    / \
    20 70
    */
    node *root1 = newNode(100);
    root1->left     = newNode(50);
    root1->right = newNode(300);
    root1->left->left = newNode(20);
    root1->left->right = newNode(70);
 
    /* Create following tree as second balanced BST
            80
        / \
        40 120
    */
    node *root2 = newNode(80);
    root2->left     = newNode(40);
    root2->right = newNode(120);
 
    node *mergedTree = mergeTrees(root1, root2, 5, 3);
 
    cout << "Following is Inorder traversal of the merged tree \n";
    printInorder(mergedTree);
 
    return 0;
}
