
#include <iostream>
#include<stack>
using namespace std;

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int value){
        this->data=value;
        this->left=NULL;
        this->right=NULL;
    }
};

void preorderRecc(struct Node* root){
    if(root==NULL) return;
    cout<<root->data<<" ";
    preorderRecc(root->left);
    preorderRecc(root->right);
}

void preorderIter(struct Node* root){
    if(root==NULL) return;
    stack<Node*>st;
    st.push(root);
    while(!st.empty()){
        Node* node=st.top();
        st.pop();
        cout<<node->data<<" ";
        
        if(node->right){
            st.push(node->right);
        }
        if(node->left){
            st.push(node->left);
        }
        // the right child must be pushed first so that the left child
		// is processed first (LIFO order)
    }
}
void inorderRecc(struct Node* root){
    if(root==NULL) return;
    
    inorderRecc(root->left);
    cout<<root->data<<" ";
    inorderRecc(root->right);
}

void inorderIter(struct Node* root){
   // create an empty stack
    stack<Node*> stack;
 
    // start from the root node (set current node to the root node)
    Node* curr = root;
 
    // if the current node is null and the stack is also empty, we are done
    while (!stack.empty() || curr != nullptr)
    {
        // if the current node exists, push it into the stack (defer it)
        // and move to its left child
        if (curr != nullptr)
        {
            stack.push(curr);
            curr = curr->left;
        }
        else {
            // otherwise, if the current node is null, pop an element from the stack,
            // print it, and finally set the current node to its right child
            curr = stack.top();
            stack.pop();
            cout << curr->data << " ";
 
            curr = curr->right;
        }
    }
}

void postorderRecc(struct Node* root){
    if(root==NULL) return;
    
    postorderRecc(root->left);
    
    postorderRecc(root->right);
    cout<<root->data<<" ";
}

void postorderIter(struct Node* root){
   // create an empty stack and push the root node
    stack<Node*> s;
    s.push(root);
 
    // create another stack to store postorder traversal
    stack<int> out;
 
    // loop till stack is empty
    while (!s.empty())
    {
        // pop a node from the stack and push the data into the output stack
        Node* curr = s.top();
        s.pop();
 
        out.push(curr->data);
 
        // push the left and right child of the popped node into the stack
        if (curr->left) {
            s.push(curr->left);
        }
 
        if (curr->right) {
            s.push(curr->right);
        }
    }
 
    // print postorder traversal
    while (!out.empty())
    {
        cout << out.top() << " ";
        out.pop();
    }
}



int main()
{
    /* Construct the following tree
               1
             /   \
            /     \
           2       3
          /      /   \
         /      /     \
        4      5       6
              / \
             /   \
            7     8
    */
    Node* root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->left = new Node(4);
	root->right->left = new Node(5);
	root->right->right = new Node(6);
	root->right->left->left = new Node(7);
	root->right->left->right = new Node(8);

    cout<<endl<<"This is preorder"<<endl;
    preorderIter(root);
    cout<<endl;
    preorderRecc(root);
    
    cout<<endl<<"This is inorder"<<endl;
    inorderIter(root);
    cout<<endl;
    inorderRecc(root);
    
    cout<<endl<<"This is postorder"<<endl;
    postorderIter(root);
    cout<<endl;
    postorderRecc(root);
    
    

    return 0;
}
