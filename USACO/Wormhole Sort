#include <bits/stdc++.h>
using namespace std;
#define int long long

class DSU
{
private:
    vector<int> parent;
    vector<int> rank;

public:
    DSU(int n) : parent(n + 1), rank(n + 1, 1)
    {
        for (int i = 0; i <= n; i++)
        {
            parent[i] = i;
        }
    }

    int find(int a)
    {
        if (parent[a] == a)
            return a;
        return parent[a] = find(parent[a]);
    }

    void Union(int a, int b)
    {
        a = find(a);
        b = find(b);
        if (a == b)
            return;

        if (rank[a] < rank[b])
        {
            swap(a, b);
        }
        parent[b] = a;
        rank[a] += rank[b];
    }
};

bool check(int w, vector<int> &p, vector<vector<int>> &adj)
{
    const int n = (int)p.size();
    DSU d(n);

    for (auto x : adj)
    {
        if (x[2] >= w)
        {
            d.Union(x[0], x[1]);
        }
    }

    for (int i = 0; i < n; i++)
    {
        if (d.find(i + 1) != d.find(p[i]))
        {
            return false;
        }
    }
    
    return true;
}

int32_t main()
{
#ifndef ONLINE_JUDGE
    freopen("wormsort.in", "r", stdin);
    freopen("wormsort.out", "w", stdout);
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif
    int n, m;
    cin >> n >> m;

    vector<int> p(n);
    for (auto &x : p)
        cin >> x;

    int l, r;
    int maxWidth = 0;
    vector<vector<int>> adj(m, vector<int>(3));
    for (int i = 0; i < m; i++)
    {
        cin >> adj[i][0] >> adj[i][1] >> adj[i][2];
        maxWidth = max({maxWidth , adj[i][2]});
    }
    if(is_sorted(p.begin(),p.end())){
        cout<<-1;
        return 0;
    }
    l = 0;
    r = maxWidth+1;
    int ans = -1;
    while (l <= r)
    {
        int mid = l + (r - l) / 2;
        if (check(mid, p, adj))
        {            
            ans = mid;
            l = mid + 1;
        }
        else{
            r = mid - 1;
        }
            
    }
    if( ans == maxWidth+1) ans = -1;
    cout << ans;

    return 0;
}
