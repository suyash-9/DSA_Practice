#include <bits/stdc++.h>
using namespace std;
#define int long long

class DSU
{
private:
    map<pair<int, int>, pair<int, int>> parent;
    map<pair<int, int>, int> rank;

public:
    DSU(int n)
    {
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                parent[{i, j}] = {i, j};
                rank[{i, j}] = 1;
            }
        }
    }

    int getRank(pair<int, int> a)
    {
        return rank[a];
    }

    pair<int, int> find(pair<int, int> a)
    {
        if (parent[a] == a)
            return a;
        return parent[a] = find(parent[a]);
    }

    void Union(pair<int, int> a, pair<int, int> b)
    {
        a = find(a);
        b = find(b);
        if (a == b)
            return;

        if (rank[a] < rank[b])
        {
            swap(a, b);
        }
        parent[b] = a;
        rank[a] += rank[b];
    }
};

// bool check(vector<vector<int>>& arr,int cost)
// {
//     int n = (int)arr.size();
//     DSU d(n);
//     for(int i=0;i<n;i++){
//         for(int j=0;j<n;j++){
//             if(i>0 and abs(arr[i][j]-arr[i-1][j]) <= cost)d.Union({i,j},{i-1,j});
//             if(j>0 and abs(arr[i][j]-arr[i][j-1]) <= cost)d.Union({i,j},{i,j-1});
//             if(i<n-1 and abs(arr[i][j]-arr[i+1][j]) <= cost)d.Union({i,j},{i+1,j});
//             if(j<n-1 and abs(arr[i][j]-arr[i][j+1]) <= cost)d.Union({i,j},{i,j+1});

//         }
//     }

//     int maxNumOfCells = 0;
//     for(int i=0;i<n;i++){
//         for(int j=0;j<n;j++){
//             maxNumOfCells = max(maxNumOfCells,d.getRank({i,j}));
//         }
//     }

//     int halfCells = ((n*n)+1)/2;
//     return maxNumOfCells >= halfCells;
// }

void dfs(int x, int y, int n, vector<vector<int>> &arr, vector<vector<bool>> &vis, int &count, int &cost)
{
    if (x < 0 or y < 0 or x >= n or y >= n)
        return;
    vis[x][y] = 1;
    count++;
    if (x - 1 >= 0 and !vis[x - 1][y] and (int)(abs(arr[x][y] - arr[x - 1][y])) <= cost)
        dfs(x - 1, y, n, arr, vis, count, cost);

    if (y - 1 >= 0 and !vis[x][y - 1] and (int)(abs(arr[x][y] - arr[x][y - 1])) <= cost)
        dfs(x, y - 1, n, arr, vis, count, cost);

    if (x + 1 < n and !vis[x + 1][y] and (int)(abs(arr[x][y] - arr[x + 1][y])) <= cost)
        dfs(x + 1, y, n, arr, vis, count, cost);

    if (y + 1 < n and !vis[x][y + 1] and (int)(abs(arr[x][y] - arr[x][y + 1])) <= cost)
        dfs(x, y + 1, n, arr, vis, count, cost);
}
bool check(vector<vector<int>> &arr, int cost)
{
    int n = (int)arr.size();
    vector<vector<bool>> vis(n, vector<bool>(n, 0));
    int halfCells = ((n * n) + 1) / 2;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            int count = 0;
            if (!vis[i][j])
            {
                dfs(i, j, n, arr, vis, count, cost);
                if( count >= halfCells ) return true;
            }
        }
    }

    return false;
}

int32_t main()
{
#ifndef ONLINE_JUDGE
    freopen("tractor.in", "r", stdin);
    freopen("tractor.out", "w", stdout);
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
#endif
    int n;
    cin >> n;

    vector<vector<int>> arr(n, vector<int>(n));

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> arr[i][j];
        }
    }

    int l = 0, r = 1000000LL ;

    int ans = -1;
    while (l <= r)
    {
        int mid = l + (r - l) / 2;
        if (check(arr, mid))
        {
            ans = mid;
            r = mid - 1;
        }
        else
            l = mid + 1;
    }

    cout << ans;

    return 0;
}
