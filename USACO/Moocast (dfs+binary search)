#include <bits/stdc++.h>
using namespace std;
#define int long long

int dis(int x1,int x2,int y1,int y2){
    return ((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1));
}

void dfs(int node,vector<bool>&vis,vector<int>adj[]){
    vis[node] = 1;
    for(auto x:adj[node]){
        if(!vis[x])dfs(x,vis,adj);
    }
}

bool check(int x, vector<vector<int>> &cord)
{
    const int n = cord.size();
    vector<int>adj[n];
    for( int i = 0 ; i < n - 1 ; i++ ){
        for( int j = i+1 ; j < n ; j++ ){
            if( dis(cord[i][0],cord[j][0],cord[i][1],cord[j][1]) <= x ){
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }

    vector<bool>vis(n,0);
    dfs(0,vis,adj);

    for(auto x:vis){
        if(!x)return false;
    }
    return true;
}

int32_t main()
{
#ifndef ONLINE_JUDGE
    freopen("moocast.in", "r", stdin);
    freopen("moocast.out", "w", stdout);
#endif
    int n;
    cin >> n;
    vector<vector<int>> cord(n, vector<int>(2));
    for (int i = 0; i < n; i++)
    {
        cin >> cord[i][0] >> cord[i][1];
    }

    int count = 0;
    int l, r;
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            int dis = ((cord[i][0] - cord[j][0]) * (cord[i][0] - cord[j][0])) + ((cord[i][1] - cord[j][1]) * (cord[i][1] - cord[j][1]));
            l = min(l, dis);
            r = max(r, dis);
        }
    }

    int ans = -1;
    while (l <= r)
    {
        int mid = l + (r - l) / 2;
        if (check(mid, cord))
        {
            ans = mid;
            r = mid - 1;
        }
        else
            l = mid + 1;
    }
    cout << ans;
    return 0;
}
